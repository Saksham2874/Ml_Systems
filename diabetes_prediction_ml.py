# -*- coding: utf-8 -*-
"""Diabetes_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pFQ0lEJDr5_qw9mpdGURFPF2TKV_J7Ge
"""

# Importing the dependencies
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and processing"""

# loading the dataset to a pandas df
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

diabetes_dataset.head()

# No. of rows and colums in the dataset
diabetes_dataset.shape

# Statistical things all in once
diabetes_dataset.describe()

# Checking for the no. of diabetes patients or not , basically proportion
diabetes_dataset['Outcome'].value_counts()

# Mean values for diabetic & non-diabetic patients
diabetes_dataset.groupby('Outcome').mean()

# Seperating the data and labels (Here Features (X): The inputs that the model will learn patterns from and
# Labels (y): The output or ground truth that the model is trying to predict.)
X = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

"""Train Test Split"""

X_train , X_test , Y_train , Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

"""Trining the data"""

classifier = svm.SVC(kernel='linear')

# Training the svm classifier
classifier.fit(X_train, Y_train)

"""Model Evaluation"""

# Finding accuracy score on train data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print(training_data_accuracy)

# Finding accuracy score on test data
X_test_prediction = classifier.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print(testing_data_accuracy)

"""Making a prediction system"""

input_data = (5,109,62,41,129,35.8,0.514,25)
# Converting this input data into a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshaping the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# Standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if(prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

